/*
 * cross-chain-hackathon api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package api

import (
	"log"
	"net/http"
	"strings"
)

// A TxApiController binds http requests to an api service and writes the service results to the http response
type TxApiController struct {
	service TxApiServicer
}

// NewTxApiController creates a default api controller
func NewTxApiController(s TxApiServicer) Router {
	return &TxApiController{service: s}
}

// Routes returns all of the api route for the TxApiController
func (c *TxApiController) Routes() Routes {
	return Routes{
		{
			"TxDividendGet",
			strings.ToUpper("Get"),
			"/api/tx/dividend",
			c.GetTxDividend,
		},
		{
			"TxTradeRequestGet",
			strings.ToUpper("Get"),
			"/api/tx/trade/request",
			c.GetTxTradeRequest,
		},
	}
}

// GetTxDividend - get a CrossTx to be signed
func (c *TxApiController) GetTxDividend(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	estateId := query.Get("estateId")
	perShare, err := parseIntParameter(query.Get("perShare"))
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}

	result, err := c.service.GetTxDividend(estateId, perShare)
	if err != nil {
		w.WriteHeader(http.StatusInternalServerError)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// GetTxTradeRequest - get a CrossTx to be signed
func (c *TxApiController) GetTxTradeRequest(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	tradeId, err := parseIntParameter(query.Get("tradeId"))
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}

	from := query.Get("from")
	result, err := c.service.GetTxTradeRequest(tradeId, from)
	if err != nil {
		log.Println(err)
		w.WriteHeader(http.StatusInternalServerError)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

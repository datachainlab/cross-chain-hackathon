/*
 * cross-chain-hackathon api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package api

import (
	"encoding/json"
	"log"

	"github.com/datachainlab/cross-chain-hackathon/backend/apiserver/rdb"
)

// DividendApiService is a service that implents the logic for the DividendApiServicer
// This service should implement the business logic for every endpoint for the DividendApi API.
// Include any external packages or services that will be required by this service.
type DividendApiService struct {
}

// NewDividendApiService creates a default api service
func NewDividendApiService() DividendApiServicer {
	return &DividendApiService{}
}

// GetDividendsByEstateId - get the dividends of an estate token
func (s *DividendApiService) GetDividendsByEstateId(estateId string) (interface{}, error) {
	db, err := rdb.InitDB()
	if err != nil {
		log.Println(err)
		return nil, ErrorFailedDBConnect
	}
	q := `SELECT id, estateId, index, perShare, crossTx, status FROM dividend WHERE estateId = ?`
	row := db.QueryRow(q, estateId)
	if err != nil {
		log.Println(err)
		return nil, err
	}
	d := Dividend{}
	j := []byte{}
	if err := row.Scan(&d.Id, &d.EstateId, &d.Index, &d.PerShare, &j, &d.Status); err != nil {
		log.Println(err)
		return nil, err
	}
	if err := json.Unmarshal(j, &d.CrossTx); err != nil {
		log.Println(err)
		return nil, err
	}
	return d, nil
}

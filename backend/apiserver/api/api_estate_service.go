/*
 * cross-chain-hackathon api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package api

import (
	"database/sql"
	"encoding/json"
	"log"

	"github.com/datachainlab/cross-chain-hackathon/backend/apiserver/rdb"
)

// EstateApiService is a service that implents the logic for the EstateApiServicer
// This service should implement the business logic for every endpoint for the EstateApi API.
// Include any external packages or services that will be required by this service.
type EstateApiService struct {
}

// NewEstateApiService creates a default api service
func NewEstateApiService() EstateApiServicer {
	return &EstateApiService{}
}

// GetEstateById - get an estate and its trade data
func (s *EstateApiService) GetEstateById(estateId string) (interface{}, error) {
	db, err := rdb.InitDB()
	if err != nil {
		log.Println(err)
		return nil, ErrorFailedDBConnect
	}

	/* HACK the following process should be improved. */
	estate := &Estate{}
	if err := db.Get(estate, "SELECT * FROM estate WHERE tokenId = ?", estateId); err != nil {
		log.Println(err)
		return nil, ErrorFailedDBGet
	}
	trades := []Trade{}
	rows, err := db.Query("SELECT id, estateId, unitPrice, amount, buyer, seller, type, status, updatedAt FROM trade WHERE estateId = ?", estateId)
	if err != nil {
		return nil, err
	}
	for rows.Next() {
		t := Trade{}
		var buyer sql.NullString
		if err := rows.Scan(&t.Id, &t.EstateId, &t.UnitPrice, &t.Amount, &buyer, &t.Seller, &t.Type, &t.Status, &t.UpdatedAt); err != nil {
			log.Println(err)
			return nil, ErrorFailedDBGet
		}
		trades = append(trades, t)
	}

	q := `SELECT id, tradeId, "from", crossTx, status, updatedAt FROM trade_request WHERE tradeId = ?`
	for i := 0; i < len(trades); i++ {
		reqs := []TradeRequest{}
		rs, err := db.Query(q, trades[i].Id)
		if err != nil {
			return nil, err
		}
		for rs.Next() {
			tr := TradeRequest{}
			j := []byte{}
			if err := rs.Scan(&tr.Id, &tr.TradeId, &tr.From, &j, &tr.Status, &tr.UpdatedAt); err != nil {
				return nil, err
			}
			if err := json.Unmarshal(j, &tr.CrossTx); err != nil {
				return nil, err
			}
			reqs = append(reqs, tr)
		}
		trades[i].Requests = reqs
	}
	estate.Trades = trades
	return estate, nil
}

// GetEstates - get all estates
func (s *EstateApiService) GetEstates() (interface{}, error) {
	db, err := rdb.InitDB()
	if err != nil {
		log.Println(err)
		return nil, ErrorFailedDBConnect
	}
	estates := []Estate{}
	if err := db.Select(&estates, "SELECT * FROM estate ORDER BY tokenId"); err != nil {
		log.Println(err)
		return nil, ErrorFailedDBGet
	}

	for i, es := range estates {
		trades := []Trade{}
		q := `SELECT id, estateId, unitPrice, amount, buyer, seller, type, status, updatedAt FROM trade WHERE estateId = ?`
		if err := db.Select(&trades, q, es.TokenId); err != nil {
			return nil, err
		}
		estates[i].Trades = trades
	}

	return &estates, nil
}

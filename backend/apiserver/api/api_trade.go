/*
 * cross-chain-hackathon api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package api

import (
	"encoding/json"
	"log"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// A TradeApiController binds http requests to an api service and writes the service results to the http response
type TradeApiController struct {
	service TradeApiServicer
}

// NewTradeApiController creates a default api controller
func NewTradeApiController(s TradeApiServicer) Router {
	return &TradeApiController{service: s}
}

// Routes returns all of the api route for the TradeApiController
func (c *TradeApiController) Routes() Routes {
	return Routes{
		{
			"DeleteTrade",
			strings.ToUpper("Delete"),
			"/api/trade/{id}",
			c.DeleteTrade,
		},
		{
			"DeleteTradeRequest",
			strings.ToUpper("Delete"),
			"/api/trade/request/{id}",
			c.DeleteTradeRequest,
		},
		{
			"PostTrade",
			strings.ToUpper("Post"),
			"/api/trades",
			c.PostTrade,
		},
		{
			"PostTradeRequest",
			strings.ToUpper("Post"),
			"/api/trade/requests",
			c.PostTradeRequest,
		},
	}
}

// DeleteTrade - cancel a trade
func (c *TradeApiController) DeleteTrade(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	id, err := parseIntParameter(params["id"])
	if err != nil {
		log.Println(err)
		w.WriteHeader(http.StatusBadRequest)
		return
	}

	result, err := c.service.DeleteTrade(id)
	if err != nil {
		w.WriteHeader(HttpStatus(err))
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// DeleteTradeRequest - cancel a trade request
func (c *TradeApiController) DeleteTradeRequest(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	id, err := parseIntParameter(params["id"])
	if err != nil {
		log.Println(err)
		w.WriteHeader(http.StatusBadRequest)
		return
	}

	result, err := c.service.DeleteTradeRequest(id)
	if err != nil {
		w.WriteHeader(HttpStatus(err))
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// PostTrade - post a new sell offer
func (c *TradeApiController) PostTrade(w http.ResponseWriter, r *http.Request) {
	trade := &Trade{}
	if err := json.NewDecoder(r.Body).Decode(&trade); err != nil {
		log.Println(err)
		w.WriteHeader(http.StatusBadRequest)
		return
	}

	result, err := c.service.PostTrade(*trade)
	if err != nil {
		w.WriteHeader(HttpStatus(err))
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// PostTradeRequest - post a new trade request
func (c *TradeApiController) PostTradeRequest(w http.ResponseWriter, r *http.Request) {
	postTradeRequestInput := &PostTradeRequestInput{}
	if err := json.NewDecoder(r.Body).Decode(&postTradeRequestInput); err != nil {
		log.Println(err)
		w.WriteHeader(http.StatusBadRequest)
		return
	}

	result, err := c.service.PostTradeRequest(*postTradeRequestInput)
	if err != nil {
		w.WriteHeader(HttpStatus(err))
		return
	}

	EncodeJSONResponse(result, nil, w)
}

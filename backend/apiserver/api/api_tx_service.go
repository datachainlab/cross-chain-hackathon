/*
 * cross-chain-hackathon api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package api

import (
	"errors"
	"log"

	"github.com/datachainlab/cross-chain-hackathon/backend/apiserver/rdb"
)

const (
	CO_CHAIN_ID       = "ibc0"
	TYPE_CROSS_TX     = "cosmos-sdk/StdTx"
	TYPE_MSG_INITIATE = "cross/MsgInitiate"
)

// TxApiService is a service that implents the logic for the TxApiServicer
// This service should implement the business logic for every endpoint for the TxApi API.
// Include any external packages or services that will be required by this service.
type TxApiService struct {
}

// NewTxApiService creates a default api service
func NewTxApiService() TxApiServicer {
	return &TxApiService{}
}

// TODO impl or remove
// TxDividendGet - get a CrossTx to be signed
func (s *TxApiService) TxDividendGet(estateId string, perShare int64) (interface{}, error) {
	db, err := rdb.InitDB()
	if err != nil {
		log.Println(err)
		return nil, ErrorFailedDBConnect
	}

	issuer := &User{}
	q := `SELECT user.* FROM estate INNER JOIN user ON estate.issuedBy = user.id WHERE estate.tokenId = ?`
	if err := db.Get(issuer, q, estateId); err != nil {
		log.Println(err)
		return nil, ErrorFailedDBGet
	}

	ctxs := []ContractTransaction{}
	// TODO
	timeoutHeight := int64(100000)
	// TODO
	nonce := int64(0)
	return &CrossTx{
		Type: TYPE_CROSS_TX,
		Value: StdTx{
			Msg: []Msg{
				{
					Type: TYPE_MSG_INITIATE,
					Value: MsgInitiate{
						Sender:               issuer.Id,
						ChainID:              CO_CHAIN_ID,
						ContractTransactions: ctxs,
						TimeoutHeight:        timeoutHeight,
						Nonce:                nonce,
					},
				},
			},
			Fee: StdFee{
				Amount: []Coin{},
				Gas:    20000,
			},
			Signatures: nil,
			Memo:       "",
		},
	}, nil
}

// TxTradeRequestGet - get a CrossTx to be signed
func (s *TxApiService) TxTradeRequestGet(tradeId int64, from string) (interface{}, error) {
	// TODO - update TxTradeRequestGet with the required logic for this service method.
	// Add api_tx_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.
	return nil, errors.New("service method 'TxTradeRequestGet' not implemented")
}

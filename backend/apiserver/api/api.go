/*
 * cross-chain-hackathon api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package api

import (
	"net/http"
)


// DividendApiRouter defines the required methods for binding the api requests to a responses for the DividendApi
// The DividendApiRouter implementation should parse necessary information from the http request, 
// pass the data to a DividendApiServicer to perform the required actions, then write the service results to the http response.
type DividendApiRouter interface { 
	TxDividendGet(http.ResponseWriter, *http.Request)
}
// EstateApiRouter defines the required methods for binding the api requests to a responses for the EstateApi
// The EstateApiRouter implementation should parse necessary information from the http request, 
// pass the data to a EstateApiServicer to perform the required actions, then write the service results to the http response.
type EstateApiRouter interface { 
	GetEstateById(http.ResponseWriter, *http.Request)
	GetEstates(http.ResponseWriter, *http.Request)
}
// TradeApiRouter defines the required methods for binding the api requests to a responses for the TradeApi
// The TradeApiRouter implementation should parse necessary information from the http request, 
// pass the data to a TradeApiServicer to perform the required actions, then write the service results to the http response.
type TradeApiRouter interface { 
	DeleteTrade(http.ResponseWriter, *http.Request)
	DeleteTradeRequest(http.ResponseWriter, *http.Request)
	PostTrade(http.ResponseWriter, *http.Request)
	PostTradeRequest(http.ResponseWriter, *http.Request)
	TxTradeRequestGet(http.ResponseWriter, *http.Request)
}
// TxApiRouter defines the required methods for binding the api requests to a responses for the TxApi
// The TxApiRouter implementation should parse necessary information from the http request, 
// pass the data to a TxApiServicer to perform the required actions, then write the service results to the http response.
type TxApiRouter interface { 
	TxDividendGet(http.ResponseWriter, *http.Request)
	TxTradeRequestGet(http.ResponseWriter, *http.Request)
}
// UserApiRouter defines the required methods for binding the api requests to a responses for the UserApi
// The UserApiRouter implementation should parse necessary information from the http request, 
// pass the data to a UserApiServicer to perform the required actions, then write the service results to the http response.
type UserApiRouter interface { 
	GetUser(http.ResponseWriter, *http.Request)
}


// DividendApiServicer defines the api actions for the DividendApi service
// This interface intended to stay up to date with the openapi yaml used to generate it, 
// while the service implementation can ignored with the .openapi-generator-ignore file 
// and updated with the logic required for the API.
type DividendApiServicer interface { 
	TxDividendGet(string, int64) (interface{}, error)
}


// EstateApiServicer defines the api actions for the EstateApi service
// This interface intended to stay up to date with the openapi yaml used to generate it, 
// while the service implementation can ignored with the .openapi-generator-ignore file 
// and updated with the logic required for the API.
type EstateApiServicer interface { 
	GetEstateById(string) (interface{}, error)
	GetEstates() (interface{}, error)
}


// TradeApiServicer defines the api actions for the TradeApi service
// This interface intended to stay up to date with the openapi yaml used to generate it, 
// while the service implementation can ignored with the .openapi-generator-ignore file 
// and updated with the logic required for the API.
type TradeApiServicer interface { 
	DeleteTrade(int64) (interface{}, error)
	DeleteTradeRequest(int64) (interface{}, error)
	PostTrade(Trade) (interface{}, error)
	PostTradeRequest(PostTradeRequestInput) (interface{}, error)
	TxTradeRequestGet(int64, string) (interface{}, error)
}


// TxApiServicer defines the api actions for the TxApi service
// This interface intended to stay up to date with the openapi yaml used to generate it, 
// while the service implementation can ignored with the .openapi-generator-ignore file 
// and updated with the logic required for the API.
type TxApiServicer interface { 
	TxDividendGet(string, int64) (interface{}, error)
	TxTradeRequestGet(int64, string) (interface{}, error)
}


// UserApiServicer defines the api actions for the UserApi service
// This interface intended to stay up to date with the openapi yaml used to generate it, 
// while the service implementation can ignored with the .openapi-generator-ignore file 
// and updated with the logic required for the API.
type UserApiServicer interface { 
	GetUser(string) (interface{}, error)
}
